from SigProfilerAssignment import Analyzer as Assign
from SigProfilerExtractor import sigpro as Extract

def run_SigProfiler_Assignment(parameters,input,output):
    Assign.cosmic_fit(samples=input,
                       output=output,
                       input_type=parameters["input_type"],
                       context_type=str(parameters["context_type"]),
                       collapse_to_SBS96=bool(parameters["context_type"]),
                       cosmic_version=float(parameters["cosmic_version"]),
                       exome=bool(parameters["exome"]),
                       genome_build=parameters["genome_build"],
                       signature_database=parameters["signature_database"],
                       nnls_add_penalty=parameters["nnls_add_penalty"],
                       nnls_remove_penalty=parameters["nnls_remove_penalty"],
                       initial_remove_penalty=parameters["initial_remove_penalty"],
                       exclude_signature_subgroups=parameters["exclude_signature_subgroups"],
                       export_probabilities=bool(parameters["export_probabilities"]),
                       export_probabilities_per_mutation=bool(parameters["export_probabilities_per_mutation"]),
                       make_plots=bool(parameters["make_plots"]),
                       sample_reconstruction_plots=bool(parameters["sample_reconstruction_plots"]),
                       verbose=bool(parameters["verbose"]))

def run_SigProfiler_Extractor(parameters,input,output):
    Extract.sigProfilerExtractor(
            input_data=input,
            output=output,
            input_type=parameters['input_type'],
            reference_genome= parameters['reference_genome'],
            opportunity_genome= parameters['opportunity_genome'],
            cosmic_version=parameters['cosmic_version'],
            context_type=parameters['context_type'],
            exome=parameters['exome'],
            minimum_signatures=parameters['minimum_signatures'],
            maximum_signatures=parameters['maximum_signatures'],
            nmf_replicates=parameters['nmf_replicates'],
            resample=parameters['resample'],
            batch_size=parameters['batch_size'],
            cpu=parameters['cpu'],
            gpu=parameters['gpu'],
            nmf_init=parameters['nmf_init'],
            precision=parameters['precision'],
            matrix_normalization=parameters['matrix_normalization'],
            seeds=parameters['seeds'],
            min_nmf_iterations=parameters['min_nmf_iterations'],
            max_nmf_iterations=parameters['max_nmf_iterations'],
            nmf_test_conv=parameters['nmf_test_conv'],
            nmf_tolerance=parameters['nmf_tolerance'],
            nnls_add_penalty=parameters['nnls_add_penalty'],
            nnls_remove_penalty=parameters['nnls_remove_penalty'],
            initial_remove_penalty=parameters['initial_remove_penalty'],
            collapse_to_SBS96=parameters['collapse_to_SBS96'],
            clustering_distance=parameters['clustering_distance'],
            export_probabilities=parameters['export_probabilities'],
            make_decomposition_plots=parameters['make_decomposition_plots'],
            stability=parameters['stability'],
            min_stability=parameters['min_stability'],
            combined_stability=parameters['combined_stability'],
            allow_stability_drop=parameters['allow_stability_drop'],
            get_all_signature_matrices=parameters['get_all_signature_matrices'])